data Nat = Z
         | S Nat

reverse :: [a] -> [a]
reverse l = revAppend Z [] l

revAppend :: Nat -> [a] -> [a] -> [a]
revAppend n e l = case l of
  []   -> e
  x:xs -> revAppend (S n) (x:e) xs

eqN :: Nat -> Nat -> Bool
eqN Z Z = True
eqN Z (S n) = False
eqN (S n) Z = False
eqN (S n) (S n') = eqN n n'

not :: Bool -> Bool
not True = False
not False = True

length :: [a] -> Nat
length l = case l of
  []   -> Z
  x:xs -> S (length xs)

andAlso :: Bool -> Bool -> Bool
andAlso True True = True
andAlso x y = False

orElse :: Bool -> Bool -> Bool
orElse False False = False
orElse x y = True
-- f :: [a] -> Nat -> Bool
-- f a b = eqN (length a) b
